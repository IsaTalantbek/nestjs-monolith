generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
	/// Владелец сайта - царь и бог
	owner
	/// Админ - царь
	admin
	/// Разработчик сайта (не владелец) - бравые ребята присоединившиеся после релиза
	developer
	/// Модератор сайта (не разработчик) - те кто могут выдать бан
	moderator
	/// Тех-поддержка сайта (не модератор) - те кто ответят на любой вопрос и передадут его выше
	support
	/// Пользователь сайта - обычный пользователь
	user

	@@map("accounts_roles")
}

enum AccountState {
	/// Только создан и не подтверждён по почте и тп
	created
	/// Обычный аккаунт
	activated
	/// Удалённый аккаунт (пользователем или системой)
	deleted
	/// Заблокированный аккаунт
	banned

	@@map("accounts_states")
}

model Account {
	id				String			@id @default(uuid()) 
	accountRole 	AccountRole		@map("account_role") @default(user)
	accountState	AccountState	@map("account_state") @default(created)
	profiles  		Profile[]					
	posts			Post[]
	likes			Like[]
	Subscriptions	Subscription[]
	blacklist		BlackList[]
	friends			Friend[]
	sessions		Session[]		

	password		String			@map("password")
	tfaCode			String?			@unique @map("tfa_code")
	email			String?			@unique	@map("email")
	phone			String?			@unique	@map("phone")
	accountUI		String?			@default(uuid())
	
	createdAt		DateTime		@map("created_at") @default(now())
	createdBy		String			@map("created_by") @default("System")	
	updatedAt		DateTime		@map("updated_at") @updatedAt
	updatedBy		String?			@map("updated_by") 
	deletedAt		DateTime?		@map("deleted_at")
	deletedBy		String?			@map("deleted_by") 
	deleted			Boolean?		@default(false)

	@@map("accounts")
}

model Session {
	id        			String      	@id @default(uuid())
  	accountId     		String			
  	superUser       	Boolean
  	expiresAt  			DateTime
  	account      		Account     	@relation(fields: [accountId], references: [id], onDelete: Cascade)
	ipAdress			String
	ipAdressFull		String			
	headers				String

	createdAt			DateTime		@map("created_at") @default(now())	
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)
  @@index([accountId])
}

enum ProfileType {
	/// Личная страница - 1 профиль к 1 аккаунту
	personal			
	/// Сообщество для читателей
	readers_community	
	/// Сообщество для авторов
	authors_community	
	/// Авторское объединение (для со-авторства)
	authors_union		

	@@map("profiles_type_enum")
}

enum ProfileState {
	/// Только создан и не подтверждён по почте и тп
	created
	/// Обычный профиль
	activated
	/// Заблокированный профиль
	banned

	@@map("profiles_states_enum")
}

enum privacyType {
	all
	friends
	nobody

	@@map("privacy_type_enum")
}

model Privacy {
	id					String			@id	@default(uuid())
	profile      		Profile?        
	viewProfile			privacyType 	@default(all)
	subscriptions		privacyType 	@default(all)
	posts				privacyType 	@default(all)
	likes				privacyType 	@default(all)

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)

	@@map("privacy")
}

model statsProfile {
	id					String			@id	@default(uuid())
	subscribers			Int				@default(0)
	likes				Int				@default(0)
	dislikes			Int				@default(0)
	ratio				Int				@default(0)

	profile				Profile?		@relation("stats-profile")

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)
}

model Profile {
	id					String			@id @default(uuid()) 
	profileType			ProfileType		@map("profile_type") @default(personal)
	profileState		ProfileState	@map("profile_state") @default(created)
	cityId				String?			@map("city_id") 
	avatarImageId		String?			@map("avatar_image_id") 
	coverImageId		String?			@map("cover_image_id") 
	slug				String			@map("slug") @unique 
	name        		String?			@map("name")	
	posts				Post[]
	subscribers			Subscription[]
	comments			Comment[]					

	official			Boolean			@default(false) //Имеется ввиду, подтвержденный человек

	owner				Account?		@relation(fields: [ownerId], references: [id])
	ownerId				String?			
	privacy      		Privacy?     	@relation(fields: [privacyId], references: [id])
    privacyId    		String?      	@unique
	stats				statsProfile	@relation("stats-profile",fields: [statsId], references: [id] )
	statsId				String			@unique				

	shortInfo			Json?			@map("short_info")
	extraInfo			Json?			@map("extra_info")
	otherLinks			Json?			@map("other_links")

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)

	@@map("profiles")
}

model Subscription {
	id 					String			@id @default(uuid())
	subscriberAid		String			@map("subscriber_aid")
	authorPid			String			@map("author_pid")
	user				Account			@relation(fields: [subscriberAid], references: [id])
  	profile    			Profile     	@relation(fields: [authorPid], references: [id]) 
	
	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	active				Boolean			@default(false)
  	@@unique([subscriberAid, authorPid]) // Гарантирует уникальность комбинации
	@@map("subscribes")
}

enum friendType {
	active
	inactive
	waiting

	@@map("friends_type_enum")
}

model Friend {
	id 					String			@id @default(uuid())
	user				Account			@relation(fields: [initAid], references: [id])
	initAid				String			@map("user_id")
	vsAid				String			@map("vs_user_id")

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by")			
	type				friendType		@map("type") 	   @default(waiting)

	@@index([initAid, vsAid])
	@@index([type])
	@@unique([initAid, vsAid])
	@@map("friends")
}


enum AccountProfileRelationRank {
	/// Владелец личного профиля, сообщества, организатор со-авторства и тд - полный набор прав
	owner
	/// Администратор профиля, подчинённый владельца - набор прав согласно выданной роли
	administrator
	/// Модератор профиля, подчинённый владельца и администраторов - набор прав согласно выданной роли
	moderator
	/// Подписчик профиля, рядовой читатель - набор прав согласно выданной роли
	subscriber

	@@map("accounts_profiles_relations_type_enum")
}

enum  PostType {
	article //Статья
	poetry //Стих
	announcement //Анонс
	@@map("posts_type_enum")
}

model Post {
	id                 	String			@id @default(uuid())
	profile				Profile			@relation(fields: [initPid], references: [id])
	user				Account			@relation(fields: [initAid], references: [id])
	initAid				String			@map("user_id")
	initPid				String			@map("profile_id")
	actual				Boolean			@default(true)
	like				Like[]
	comments			Comment[]			

	title				String			@map("title")
	type				PostType		@map("type")
	text				String			@map("text") 			
	links				Json?			@map("links")
	image				String?			@map("image")
	likes				Int				@map("likes")	  @default(0)	
	dislikes			Int				@map("dislikes")  @default(0)	
	tags				Tags[]			@relation("post-tags")

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String			@map("updated_by") @default("System")
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)
	@@map("posts")				
}

model Comment {
	id					String			@id	@default(uuid())
	text				String
	initPid				String
	postId				String
	commentId			String?
	post				Post			@relation(fields: [postId], references: [id])
	profile				Profile			@relation(fields: [initPid], references: [id])
	active				Boolean			@default(false)

	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String			@map("updated_by") @default("System")
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)
}

model Tags {
	id      			String      	@id @default(uuid())
  	name    			String   		@unique
  	posts   			Post[]   		@relation("post-tags")
  	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")

	@@map("tags")
	@@index(name)
}

enum LikeDislikeType {
	like
	dislike

	@@map("like_dislike_type_enum")
}

model Like {
	id 					String			@id @default(uuid())
	initAid				String
	postId				String
	type				LikeDislikeType
	user				Account			@relation(fields: [initAid], references: [id])
  	post    			Post     		@relation(fields: [postId], references: [id]) 
	
	createdAt			DateTime		@map("created_at") @default(now())
	createdBy			String			@map("created_by") @default("System")
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String			@map("updated_by") @default("System")
	deletedAt			DateTime?		@map("deleted_at")
	deletedBy			String?			@map("deleted_by") 
	deleted				Boolean?		@default(false)
  	@@unique([initAid, postId]) // Гарантирует уникальность комбинации
	@@map("likes")
}


model BlackList {
	id					String			@id @default(uuid()) 
	user                Account			@relation(fields: [initAid], references: [id])
	initAid			    String
	vsPid         		String

	createdAt			DateTime		@map("created_at") @default(now())    
	createdBy			String			@map("created_by") @default("System")	
	updatedAt			DateTime		@map("updated_at") @updatedAt
	updatedBy			String?			@map("updated_by") 
	active				Boolean 		@default(false)

	@@index([initAid, active])
	@@unique([initAid, vsPid])
	@@map("black_lists")
}

