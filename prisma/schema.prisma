generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
	/// Владелец сайта - царь и бог
	owner
	/// Пользователь сайта - обычный смертный
	user
	/// Разработчик сайта (не владелец) - бравые ребята присоединившиеся после релиза
	developer
	/// Модератор сайта (не разработчик) - те кто могут выдать бан
	moderator
	/// Тех-поддержка сайта (не модератор) - те кто ответят на любой вопрос и передадут его выше
	support

	@@map("accounts_roles")
}

enum AccountState {
	/// Только создан и не подтверждён по почте и тп
	created
	/// Обычный аккаунт
	activated
	/// Удалённый аккаунт (пользователем или системой)
	deleted
	/// Заблокированный аккаунт
	banned

	@@map("accounts_states")
}

model Account {
	id				String			@id @default(uuid()) 
	accountRole 	AccountRole		@map("account_role") @default(user)
	accountState	AccountState	@map("account_state") @default(created)
	profile  		Profile?			@relation(fields: [profileId], references: [id])
	profileId		String?			
	post			Post[]
	like			Like[]
	subscribe		Subcribe[]
	blacklist		BlackList[]

	login			String			@unique
	password		String
	passwordLength	Int             @map("password-length")		
	tfaCode			String?			@unique @map("tfa_code")
	email			String?			@unique
	phone			String?			@unique
	
	createdAt		DateTime		@map("create_at") @default(now())
	createdBy		String			@map("create_by") @default("System")	
	updatedAt		DateTime		@map("update_at") @updatedAt
	updatedBy		String			@map("update_by") @default("System")
	deletedAt		DateTime?		@map("delete_at")
	deletedBy		String?			@map("delete_by") 
	deleted			Boolean?

	@@map("accounts")
	@@unique([login, email])
}

enum ProfileType {
	/// Личная страница - 1 профиль к 1 аккаунту
	personal			
	/// Сообщество для читателей
	readers_community	
	/// Сообщество для авторов
	authors_community	
	/// Авторское объединение (для со-авторства)
	authors_union		

	@@map("profiles_types")
}

enum ProfileState {
	/// Только создан и не подтверждён по почте и тп
	created
	/// Обычный профиль
	activated
	/// Удалённый профиль (одним из владельцев или системой)
	deleted
	/// Заблокированный профиль
	banned

	@@map("profiles_states")
}

enum profilePrivacy {
	all
	friends
	nobody
}

model Privacy {
	id					String			@id	@default(uuid())
	profile				Profile[]			
	profileId			String
	viewProfile			profilePrivacy	@default(all)
	subscribe			profilePrivacy	@default(all)
	posts				profilePrivacy	@default(all)
	like				profilePrivacy	@default(all)

	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	deletedAt			DateTime?		@map("delete_at")
	deletedBy			String?			@map("delete_by") 
	deleted				Boolean?
}

model Profile {
	id					String			@id @default(uuid()) 
	profileType			ProfileType		@map("profile_type") @default(personal)
	profileState		ProfileState	@map("profile_state") @default(created)
	cityId				String?			@map("city_id") 
	avatarImageId		String?			@map("avatar_image_id") 
	coverImageId		String?			@map("cover_image_id") 
	post				Post[]
	subscribe			Subcribe[]			
	name        		String?
	
	subcribes			Int				@default(0)
	likes				Int				@default(0)
	dislikes			Int				@default(0)
	ratio				Int				@default(0)

	official			Boolean			@default(false) //Имеется ввиду, подтвержденный человек

	privacy				Privacy?		@relation(fields: [privacyId], references: [id])	
	owner				Account[]		@relation()
	ownerId				String?
	privacyId 			String?						

	verificationInfo	Json?			@map("verification_info")
	shortInfo			Json?			@map("short_info")
	extraInfo			Json?			@map("extra_info")
	otherLinks			Json?			@map("other_links")

	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	deletedAt			DateTime?		@map("delete_at")
	deletedBy			String?			@map("delete_by") 
	deleted				Boolean?

	@@map("profiles")
}

model Subcribe {
	id 					String			@id @default(uuid())
	userId				String
	profileId			String
	user				Account			@relation(fields: [userId], references: [id])
  	profile    			Profile     	@relation(fields: [profileId], references: [id]) 
	
	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	active				Boolean	
  	@@unique([userId, profileId]) // Гарантирует уникальность комбинации
}



enum AccountProfileRelationRank {
	/// Владелец личного профиля, сообщества, организатор со-авторства и тд - полный набор прав
	owner
	/// Администратор профиля, подчинённый владельца - набор прав согласно выданной роли
	administrator
	/// Модератор профиля, подчинённый владельца и администраторов - набор прав согласно выданной роли
	moderator
	/// Подписчик профиля, рядовой читатель - набор прав согласно выданной роли
	subscriber

	@@map("accounts_profiles_relations_types")
}

enum  PostType {
	article //Статья
	poetry //Стих
	announcement //Анонс
	@@map("post_type")
}

model Post {
	id                 	String			@id @default(uuid())
	profile				Profile			@relation(fields: [profileId], references: [id])
	user				Account			@relation(fields: [userId], references: [id])
	userId				String
	profileId			String
	actual				Boolean			@default(true)
	like				Like[]

	title				String
	type				PostType
	text				String			 			
	links				Json?
	image				String?
	likes				Int				@default(0)
	dislikes			Int				@default(0)
	tags				Tags[]			@relation("post-tags")

	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	deletedAt			DateTime?		@map("delete_at")
	deletedBy			String?			@map("delete_by") 
	deleted				Boolean?
	@@map("post")				
}

model Tags {
	id      			Int      		@id @default(autoincrement())
  	name    			String   		@unique
  	posts   			Post[]   		@relation("post-tags")
  	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
}


model Like {
	id 					String			@id @default(uuid())
	userId				String
	postId				String
	type				String			@default("like")
	user				Account			@relation(fields: [userId], references: [id])
  	post    			Post     		@relation(fields: [postId], references: [id]) 
	
	createdAt			DateTime		@map("create_at") @default(now())
	createdBy			String			@map("create_by") @default("System")
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	deletedAt			DateTime?		@map("delete_at")
	deletedBy			String?			@map("delete_by") 
	deleted				Boolean?	
  	@@unique([userId, postId, type]) // Гарантирует уникальность комбинации
}


model BlackList {
	id					String			@id @default(uuid()) 
	user                Account			@relation(fields: [userId], references: [id])
	userId			    String
	vsProfileId         String

	createdAt			DateTime		@map("create_at") @default(now())    
	createdBy			String			@map("create_by") @default("System")	
	updatedAt			DateTime		@map("update_at") @updatedAt
	updatedBy			String			@map("update_by") @default("System")
	active				Boolean 		@default(false)
	@@unique([userId, vsProfileId])
	@@map("black_list")
}

